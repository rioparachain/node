--- pallets/assets/src/mock.rs.tmp
+++ pallets/assets/src/mock.rs
@@ -24,6 +24,7 @@
 pub type CurrencyId = u32;
 pub type Balance = u64;
 pub type ReserveIdentifier = [u8; 8];
+pub type StringLimit = ConstU32<128>;
 
 pub const DOT: CurrencyId = 1;
 pub const BTC: CurrencyId = 2;
@@ -42,8 +43,8 @@
 use crate as tokens;
 
 impl frame_system::Config for Runtime {
-	type RuntimeOrigin = RuntimeOrigin;
-	type RuntimeCall = RuntimeCall;
+	type Origin = Origin;
+	type Call = Call;
 	type Index = u64;
 	type BlockNumber = u64;
 	type Hash = H256;
@@ -51,7 +52,7 @@
 	type AccountId = AccountId;
 	type Lookup = IdentityLookup<Self::AccountId>;
 	type Header = Header;
-	type RuntimeEvent = RuntimeEvent;
+	type Event = Event;
 	type BlockHashCount = ConstU64<250>;
 	type BlockWeights = ();
 	type BlockLength = ();
@@ -119,7 +120,7 @@
 	type Currency = MockCurrencyAdapter;
 	type ApproveOrigin = frame_system::EnsureRoot<AccountId>;
 	type RejectOrigin = frame_system::EnsureRoot<AccountId>;
-	type RuntimeEvent = RuntimeEvent;
+	type Event = Event;
 	type OnSlash = ();
 	type ProposalBond = ProposalBond;
 	type ProposalBondMinimum = ProposalBondMinimum;
@@ -130,7 +131,6 @@
 	type SpendFunds = ();
 	type WeightInfo = ();
 	type MaxApprovals = MaxApprovals;
-	type SpendOrigin = frame_support::traits::NeverEnsureOrigin<Balance>;
 }
 
 thread_local! {
@@ -187,7 +187,7 @@
 
 impl pallet_elections_phragmen::Config for Runtime {
 	type PalletId = ElectionsPhragmenPalletId;
-	type RuntimeEvent = RuntimeEvent;
+	type Event = Event;
 	type Currency = MockCurrencyAdapter;
 	type CurrencyToVote = SaturatingCurrencyToVote;
 	type ChangeMembers = TestChangeMembers;
@@ -198,8 +198,6 @@
 	type TermDuration = ConstU64<5>;
 	type DesiredMembers = ConstU32<2>;
 	type DesiredRunnersUp = ConstU32<2>;
-	type MaxCandidates = ConstU32<5>;
-	type MaxVoters = ConstU32<5>;
 	type LoserCandidate = ();
 	type KickedMember = ();
 	type WeightInfo = ();
@@ -228,18 +226,10 @@
 	pub static KILLED: RefCell<Vec<(AccountId, CurrencyId)>> = RefCell::new(vec![]);
 }
 
-pub struct TrackCreatedAccounts<T>(marker::PhantomData<T>);
-impl<T: Config> TrackCreatedAccounts<T>
-where
-	T::AccountId: From<AccountId32> + Into<AccountId32>,
-	T::CurrencyId: From<u32> + Into<u32>,
-{
-	pub fn accounts() -> Vec<(T::AccountId, T::CurrencyId)> {
-		CREATED
-			.with(|accounts| accounts.borrow().clone())
-			.iter()
-			.map(|account| (account.0.clone().into(), account.1.clone().into()))
-			.collect()
+pub struct TrackCreatedAccounts;
+impl TrackCreatedAccounts {
+	pub fn accounts() -> Vec<(AccountId, CurrencyId)> {
+		CREATED.with(|accounts| accounts.borrow().clone())
 	}
 
 	pub fn reset() {
@@ -248,30 +238,18 @@
 		});
 	}
 }
-impl<T: Config> Happened<(T::AccountId, T::CurrencyId)> for TrackCreatedAccounts<T>
-where
-	T::AccountId: From<AccountId32> + Into<AccountId32>,
-	T::CurrencyId: From<u32> + Into<u32>,
-{
-	fn happened((who, currency): &(T::AccountId, T::CurrencyId)) {
+impl Happened<(AccountId, CurrencyId)> for TrackCreatedAccounts {
+	fn happened((who, currency): &(AccountId, CurrencyId)) {
 		CREATED.with(|accounts| {
-			accounts.borrow_mut().push((who.clone().into(), (*currency).into()));
+			accounts.borrow_mut().push((who.clone(), *currency));
 		});
 	}
 }
 
-pub struct TrackKilledAccounts<T>(marker::PhantomData<T>);
-impl<T: Config> TrackKilledAccounts<T>
-where
-	T::AccountId: From<AccountId32> + Into<AccountId32>,
-	T::CurrencyId: From<u32> + Into<u32>,
-{
-	pub fn accounts() -> Vec<(T::AccountId, T::CurrencyId)> {
-		KILLED
-			.with(|accounts| accounts.borrow().clone())
-			.iter()
-			.map(|account| (account.0.clone().into(), account.1.clone().into()))
-			.collect()
+pub struct TrackKilledAccounts;
+impl TrackKilledAccounts {
+	pub fn accounts() -> Vec<(AccountId, CurrencyId)> {
+		KILLED.with(|accounts| accounts.borrow().clone())
 	}
 
 	pub fn reset() {
@@ -280,144 +258,34 @@
 		});
 	}
 }
-impl<T: Config> Happened<(T::AccountId, T::CurrencyId)> for TrackKilledAccounts<T>
-where
-	T::AccountId: From<AccountId32> + Into<AccountId32>,
-	T::CurrencyId: From<u32> + Into<u32>,
-{
-	fn happened((who, currency): &(T::AccountId, T::CurrencyId)) {
+impl Happened<(AccountId, CurrencyId)> for TrackKilledAccounts {
+	fn happened((who, currency): &(AccountId, CurrencyId)) {
 		KILLED.with(|accounts| {
-			accounts.borrow_mut().push((who.clone().into(), (*currency).into()));
+			accounts.borrow_mut().push((who.clone(), *currency));
 		});
 	}
 }
 
-thread_local! {
-	pub static ON_SLASH_CALLS: RefCell<u32> = RefCell::new(0);
-	pub static ON_DEPOSIT_PREHOOK_CALLS: RefCell<u32> = RefCell::new(0);
-	pub static ON_DEPOSIT_POSTHOOK_CALLS: RefCell<u32> = RefCell::new(0);
-	pub static ON_TRANSFER_PREHOOK_CALLS: RefCell<u32> = RefCell::new(0);
-	pub static ON_TRANSFER_POSTHOOK_CALLS: RefCell<u32> = RefCell::new(0);
-}
-
-pub struct OnSlashHook<T>(marker::PhantomData<T>);
-impl<T: Config> OnSlash<T::AccountId, T::CurrencyId, T::Balance> for OnSlashHook<T> {
-	fn on_slash(_currency_id: T::CurrencyId, _account_id: &T::AccountId, _amount: T::Balance) {
-		ON_SLASH_CALLS.with(|cell| *cell.borrow_mut() += 1);
-	}
-}
-impl<T: Config> OnSlashHook<T> {
-	pub fn calls() -> u32 {
-		ON_SLASH_CALLS.with(|accounts| *accounts.borrow())
-	}
-}
-
-pub struct PreDeposit<T>(marker::PhantomData<T>);
-impl<T: Config> OnDeposit<T::AccountId, T::CurrencyId, T::Balance> for PreDeposit<T> {
-	fn on_deposit(_currency_id: T::CurrencyId, _account_id: &T::AccountId, _amount: T::Balance) -> DispatchResult {
-		ON_DEPOSIT_PREHOOK_CALLS.with(|cell| *cell.borrow_mut() += 1);
-		Ok(())
-	}
-}
-impl<T: Config> PreDeposit<T> {
-	pub fn calls() -> u32 {
-		ON_DEPOSIT_PREHOOK_CALLS.with(|accounts| accounts.borrow().clone())
-	}
-}
-
-pub struct PostDeposit<T>(marker::PhantomData<T>);
-impl<T: Config> OnDeposit<T::AccountId, T::CurrencyId, T::Balance> for PostDeposit<T> {
-	fn on_deposit(currency_id: T::CurrencyId, account_id: &T::AccountId, amount: T::Balance) -> DispatchResult {
-		ON_DEPOSIT_POSTHOOK_CALLS.with(|cell| *cell.borrow_mut() += 1);
-		let account_balance: AccountData<T::Balance> =
-			tokens::Pallet::<T>::accounts::<T::AccountId, T::CurrencyId>(account_id.clone(), currency_id);
-		assert!(
-			account_balance.free.ge(&amount),
-			"Posthook must run after the account balance is updated."
-		);
-		Ok(())
-	}
-}
-impl<T: Config> PostDeposit<T> {
-	pub fn calls() -> u32 {
-		ON_DEPOSIT_POSTHOOK_CALLS.with(|accounts| accounts.borrow().clone())
-	}
-}
-
-pub struct PreTransfer<T>(marker::PhantomData<T>);
-impl<T: Config> OnTransfer<T::AccountId, T::CurrencyId, T::Balance> for PreTransfer<T> {
-	fn on_transfer(
-		_currency_id: T::CurrencyId,
-		_from: &T::AccountId,
-		_to: &T::AccountId,
-		_amount: T::Balance,
-	) -> DispatchResult {
-		ON_TRANSFER_PREHOOK_CALLS.with(|cell| *cell.borrow_mut() += 1);
-		Ok(())
-	}
-}
-impl<T: Config> PreTransfer<T> {
-	pub fn calls() -> u32 {
-		ON_TRANSFER_PREHOOK_CALLS.with(|accounts| accounts.borrow().clone())
-	}
-}
-
-pub struct PostTransfer<T>(marker::PhantomData<T>);
-impl<T: Config> OnTransfer<T::AccountId, T::CurrencyId, T::Balance> for PostTransfer<T> {
-	fn on_transfer(
-		currency_id: T::CurrencyId,
-		_from: &T::AccountId,
-		to: &T::AccountId,
-		amount: T::Balance,
-	) -> DispatchResult {
-		ON_TRANSFER_POSTHOOK_CALLS.with(|cell| *cell.borrow_mut() += 1);
-		let account_balance: AccountData<T::Balance> =
-			tokens::Pallet::<T>::accounts::<T::AccountId, T::CurrencyId>(to.clone(), currency_id);
-		assert!(
-			account_balance.free.ge(&amount),
-			"Posthook must run after the account balance is updated."
-		);
-		Ok(())
-	}
-}
-impl<T: Config> PostTransfer<T> {
-	pub fn calls() -> u32 {
-		ON_TRANSFER_POSTHOOK_CALLS.with(|accounts| accounts.borrow().clone())
-	}
-}
-
 parameter_types! {
 	pub DustReceiver: AccountId = PalletId(*b"orml/dst").into_account_truncating();
 }
 
-pub struct CurrencyHooks<T>(marker::PhantomData<T>);
-impl<T: Config> MutationHooks<T::AccountId, T::CurrencyId, T::Balance> for CurrencyHooks<T>
-where
-	T::AccountId: From<AccountId32> + Into<AccountId32>,
-	T::CurrencyId: From<u32> + Into<u32>,
-{
-	type OnDust = TransferDust<T, DustReceiver>;
-	type OnSlash = OnSlashHook<T>;
-	type PreDeposit = PreDeposit<T>;
-	type PostDeposit = PostDeposit<T>;
-	type PreTransfer = PreTransfer<T>;
-	type PostTransfer = PostTransfer<T>;
-	type OnNewTokenAccount = TrackCreatedAccounts<T>;
-	type OnKilledTokenAccount = TrackKilledAccounts<T>;
-}
-
 impl Config for Runtime {
-	type RuntimeEvent = RuntimeEvent;
+	type Event = Event;
 	type Balance = Balance;
 	type Amount = i64;
 	type CurrencyId = CurrencyId;
 	type WeightInfo = ();
 	type ExistentialDeposits = ExistentialDeposits;
-	type CurrencyHooks = CurrencyHooks<Runtime>;
+	type OnDust = TransferDust<Runtime, DustReceiver>;
+	type OnNewTokenAccount = TrackCreatedAccounts;
+	type OnKilledTokenAccount = TrackKilledAccounts;
 	type MaxLocks = ConstU32<2>;
 	type MaxReserves = ConstU32<2>;
+	type StringLimit = ConstU32<128>;
 	type ReserveIdentifier = ReserveIdentifier;
 	type DustRemovalWhitelist = MockDustRemovalWhitelist;
+	type ApprovalDeposit = ConstU64<0_u64>;
 }
 pub type TreasuryCurrencyAdapter = <Runtime as pallet_treasury::Config>::Currency;
 
@@ -437,15 +305,48 @@
 	}
 );
 
-#[derive(Default)]
 pub struct ExtBuilder {
-	balances: Vec<(AccountId, CurrencyId, Balance)>,
 	treasury_genesis: bool,
+	init: Vec<(
+		CurrencyId,
+		AssetInfo<BoundedVec<u8, StringLimit>>,
+		Restrictions,
+		Vec<(AccountId, Balance)>,
+	)>,
+}
+
+impl Default for ExtBuilder {
+	fn default() -> Self {
+		Self {
+			treasury_genesis: false,
+			init: vec![],
+		}
+	}
+}
+pub type Text = BoundedVec<u8, StringLimit>;
+macro_rules! bvec {
+	($a:expr) => {
+		Text::try_from($a.to_vec()).unwrap()
+	};
 }
 
 impl ExtBuilder {
 	pub fn balances(mut self, mut balances: Vec<(AccountId, CurrencyId, Balance)>) -> Self {
-		self.balances.append(&mut balances);
+		for (account_id, currency_id, balance) in balances.iter() {
+			self.init.append(&mut vec![(
+				*currency_id,
+				AssetInfo {
+					symbol: bvec!(b"RFUEL"),
+					name: bvec!(b"Rfuel"),
+					decimals: 12,
+					desc: bvec!(b"Rfuel"),
+					chain: Chain::Rio,
+				},
+				Restrictions::none(),
+				vec![(account_id.clone(), *balance)],
+			)]);
+		}
+
 		self
 	}
 
@@ -454,11 +355,9 @@
 			.build_storage::<Runtime>()
 			.unwrap();
 
-		tokens::GenesisConfig::<Runtime> {
-			balances: self.balances,
-		}
-		.assimilate_storage(&mut t)
-		.unwrap();
+		tokens::GenesisConfig::<Runtime> { init: self.init }
+			.assimilate_storage(&mut t)
+			.unwrap();
 
 		if self.treasury_genesis {
 			GenesisBuild::<Runtime>::assimilate_storage(&pallet_treasury::GenesisConfig::default(), &mut t).unwrap();
@@ -470,8 +369,8 @@
 			.unwrap();
 		}
 
-		TrackCreatedAccounts::<Runtime>::reset();
-		TrackKilledAccounts::<Runtime>::reset();
+		TrackCreatedAccounts::reset();
+		TrackKilledAccounts::reset();
 
 		let mut ext = sp_io::TestExternalities::new(t);
 		ext.execute_with(|| System::set_block_number(1));
