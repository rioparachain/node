--- pallets/assets/src/lib.rs.tmp
+++ pallets/assets/src/lib.rs
@@ -62,7 +62,7 @@
 	},
 	ArithmeticError, DispatchError, DispatchResult, RuntimeDebug,
 };
-use sp_std::{cmp, convert::Infallible, marker, prelude::*, vec::Vec};
+use sp_std::{cmp, convert::Infallible, marker, prelude::*, result, vec::Vec};
 
 use orml_traits::{
 	arithmetic::{self, Signed},
@@ -71,6 +71,8 @@
 	MultiReservableCurrency, NamedMultiReservableCurrency, OnDust,
 };
 
+use rp_support::info;
+
 mod imbalances;
 mod impls;
 mod mock;
@@ -82,6 +84,10 @@
 
 mod weights;
 
+pub mod types;
+use sp_std::collections::btree_map::BTreeMap;
+pub use types::{AssetInfo, Chain, Restriction, Restrictions, TotalAssetInfo};
+
 pub use impls::*;
 pub use weights::WeightInfo;
 
@@ -171,6 +177,16 @@
 
 pub use module::*;
 
+/// Data concerning an approval.
+#[derive(Clone, Encode, Decode, Eq, PartialEq, RuntimeDebug, Default, MaxEncodedLen, TypeInfo)]
+pub struct Approval<Balance, DepositBalance> {
+	/// The amount of funds approved for the balance transfer from the owner to some delegated
+	/// target.
+	pub amount: Balance,
+	/// The amount reserved on the owner's account to hold this item in storage.
+	pub deposit: DepositBalance,
+}
+
 #[frame_support::pallet]
 pub mod module {
 	use super::*;
@@ -235,8 +251,20 @@
 		// The whitelist of accounts that will not be reaped even if its total
 		// is zero or below ED.
 		type DustRemovalWhitelist: Contains<Self::AccountId>;
+
+		/// The maximum length of a name or symbol stored on-chain.
+		#[pallet::constant]
+		type StringLimit: Get<u32>;
+
+		/// The amount of funds that must be reserved when creating a new approval.
+		#[pallet::constant]
+		type ApprovalDeposit: Get<Self::Balance>;
 	}
 
+    //type CurrencyIdOf<T> = <T as Config>::CurrencyId;
+    //type AccountIdOf<T> = <T as Config>::AccountId;
+    //type BalanceOf<T> = <T as Config>::Balance;
+
 	#[pallet::error]
 	pub enum Error<T> {
 		/// The balance is too low
@@ -255,6 +283,22 @@
 		DeadAccount,
 		// Number of named reserves exceed `T::MaxReserves`
 		TooManyReserves,
+		/// Asset already exist
+		ExistedAsset,
+		/// Asset not exist
+		NotExistedAsset,
+		/// Invalid asset
+		InvalidAsset,
+		/// Invalid asset info when create asset
+		InvalidAssetInfo,
+		/// The asset is restricted by this action.
+		RestrictedAction,
+		/// Symbol, Name or Desc too long
+		TextTooLong,
+		/// No approval exists that would allow the transfer.
+		Unapproved,
+        /// Unknown error.
+        Unknown,
 	}
 
 	#[pallet::event]
@@ -345,6 +389,33 @@
 			currency_id: T::CurrencyId,
 			who: T::AccountId,
 		},
+		/// Asset created (currency_id, creator, asset_options).
+		Created { currency_id: T::CurrencyId },
+		/// Update asset restrictions
+		UpdateAssetRestriction {
+			currency_id: T::CurrencyId,
+			restrictions: Restrictions,
+		},
+		/// Asset is offline
+		Revoke { currency_id: T::CurrencyId },
+		/// (Additional) funds have been approved for transfer to a destination account.
+		ApprovedTransfer {
+			asset_id: T::CurrencyId,
+			source: T::AccountId,
+			delegate: T::AccountId,
+			amount: T::Balance,
+		},
+		/// An approval for account `delegate` was cancelled by `owner`.
+		ApprovalCancelled { asset_id: T::CurrencyId, owner: T::AccountId, delegate: T::AccountId },
+		/// An `amount` was transferred in its entirety from `owner` to `destination` by
+		/// the approved `delegate`.
+		TransferredApproved {
+			asset_id: T::CurrencyId,
+			owner: T::AccountId,
+			delegate: T::AccountId,
+			destination: T::AccountId,
+			amount: T::Balance,
+		},
 	}
 
 	/// The total issuance of a token type.
@@ -397,35 +468,73 @@
 		ValueQuery,
 	>;
 
+	/// Restrictions means this asset can't do something
+	#[pallet::storage]
+	#[pallet::getter(fn asset_restrictions)]
+	pub type AssetRestrictions<T: Config> = StorageMap<_, Twox64Concat, T::CurrencyId, Restrictions, ValueQuery>;
+
+	/// "Symbols" can only keep Vec<u8>, and utf8 safety is totally on the
+	/// client side
+	#[pallet::storage]
+	#[pallet::getter(fn asset_info_of)]
+	pub type AssetInfos<T: Config> =
+		StorageMap<_, Twox64Concat, T::CurrencyId, AssetInfo<BoundedVec<u8, T::StringLimit>>>;
+
+	#[pallet::storage]
+	#[pallet::getter(fn online)]
+	pub type Online<T: Config> = StorageMap<_, Twox64Concat, T::CurrencyId, bool, ValueQuery>;
+
+	#[pallet::storage]
+	/// Approved balance transfers. First balance is the amount approved for transfer. Second
+	/// is the amount of `T::Currency` reserved for storing this.
+	/// First key is the asset ID, second key is the owner and third key is the delegate.
+	pub type Approvals<T: Config> = StorageNMap<
+		_,
+		(
+			NMapKey<Blake2_128Concat, T::CurrencyId>,
+			NMapKey<Blake2_128Concat, T::AccountId>, // owner
+			NMapKey<Blake2_128Concat, T::AccountId>, // delegate
+		),
+		Approval<T::Balance, T::Balance>,
+	>;
+
+
 	#[pallet::genesis_config]
 	pub struct GenesisConfig<T: Config> {
-		pub balances: Vec<(T::AccountId, T::CurrencyId, T::Balance)>,
+		pub init: Vec<(
+			T::CurrencyId,
+			AssetInfo<BoundedVec<u8, T::StringLimit>>,
+			Restrictions,
+			Vec<(T::AccountId, T::Balance)>,
+		)>,
 	}
 
 	#[cfg(feature = "std")]
 	impl<T: Config> Default for GenesisConfig<T> {
 		fn default() -> Self {
-			GenesisConfig { balances: vec![] }
+			GenesisConfig { init: vec![] }
 		}
 	}
 
 	#[pallet::genesis_build]
 	impl<T: Config> GenesisBuild<T> for GenesisConfig<T> {
 		fn build(&self) {
-			// ensure no duplicates exist.
-			let unique_endowed_accounts = self
-				.balances
-				.iter()
-				.map(|(account_id, currency_id, _)| (account_id, currency_id))
-				.collect::<std::collections::BTreeSet<_>>();
-			assert!(
-				unique_endowed_accounts.len() == self.balances.len(),
-				"duplicate endowed accounts in genesis."
-			);
+			for (currency_id, info, restrictions, balances) in self.init.iter() {
+				// create asset
+				if <Pallet<T>>::asset_info_of(&currency_id).is_none() {
+					<Pallet<T>>::create_asset(*currency_id, info.clone())
+						.expect("create_asset must success in genesis");
+					// restriction
+					AssetRestrictions::<T>::insert(currency_id, restrictions);
+				}
+				// ensure no duplicates exist.
+				let unique = balances
+					.iter()
+					.map(|(acc, _)| acc)
+					.collect::<std::collections::BTreeSet<_>>();
+				assert!(unique.len() == balances.len(), "duplicate endowed accounts in genesis.");
 
-			self.balances
-				.iter()
-				.for_each(|(account_id, currency_id, initial_balance)| {
+				for (account_id, initial_balance) in balances.iter() {
 					assert!(
 						*initial_balance >= T::ExistentialDeposits::get(currency_id),
 						"the balance of any account should always be more than existential deposit.",
@@ -438,7 +547,8 @@
 							.checked_add(initial_balance)
 							.expect("total issuance cannot overflow when building genesis")
 					});
-				});
+				}
+			}
 		}
 	}
 
@@ -451,6 +561,11 @@
 
 	#[pallet::call]
 	impl<T: Config> Pallet<T> {
+
+
+
+
+
 		/// Transfer some liquid free balance to another account.
 		///
 		/// `transfer` will set the `FreeBalance` of the sender and receiver.
@@ -557,6 +672,8 @@
 			Self::do_transfer(currency_id, &from, &to, amount, ExistenceRequirement::AllowDeath)
 		}
 
+		#[rustfmt::skip]
+		/*
 		/// Set the balances of a given account.
 		///
 		/// This will alter `FreeBalance` and `ReservedBalance` in storage. it
@@ -614,6 +731,322 @@
 				Ok(())
 			})
 		}
+		*/
+
+		/// create a new asset with full permissions granted to whoever make the
+		/// call *sudo or proposal approved only*
+		#[pallet::weight(T::WeightInfo::create())]
+		pub fn create(
+			origin: OriginFor<T>,
+			currency_id: T::CurrencyId,
+			asset_info: AssetInfo<BoundedVec<u8, T::StringLimit>>,
+		) -> DispatchResult {
+			ensure_root(origin)?;
+
+			Self::create_asset(currency_id, asset_info)?;
+
+			Ok(())
+		}
+
+		#[pallet::weight(T::WeightInfo::update_asset_info())]
+		pub fn update_asset_info(
+			origin: OriginFor<T>,
+			currency_id: T::CurrencyId,
+			asset_info: AssetInfo<BoundedVec<u8, T::StringLimit>>,
+		) -> DispatchResult {
+			ensure_root(origin)?;
+			ensure!(Self::asset_info_of(currency_id).is_some(), Error::<T>::NotExistedAsset);
+			AssetInfos::<T>::insert(currency_id, asset_info);
+			Ok(())
+		}
+
+		#[pallet::weight(T::WeightInfo::update_restriction())]
+		pub fn update_restriction(
+			origin: OriginFor<T>,
+			currency_id: T::CurrencyId,
+			restrictions: Restrictions,
+		) -> DispatchResult {
+			ensure_root(origin)?;
+			<AssetRestrictions<T>>::insert(currency_id, restrictions);
+			Self::deposit_event(Event::UpdateAssetRestriction {
+				currency_id,
+				restrictions,
+			});
+			Ok(())
+		}
+
+		#[pallet::weight(T::WeightInfo::offline_asset())]
+		pub fn offline_asset(origin: OriginFor<T>, currency_id: T::CurrencyId) -> DispatchResult {
+			ensure_root(origin)?;
+			Online::<T>::remove(currency_id);
+			Self::deposit_event(Event::Revoke { currency_id });
+			Ok(())
+		}
+
+		#[pallet::weight(T::WeightInfo::online_asset())]
+		pub fn online_asset(origin: OriginFor<T>, currency_id: T::CurrencyId) -> DispatchResult {
+			ensure_root(origin)?;
+			ensure!(Self::asset_info_of(currency_id).is_some(), Error::<T>::NotExistedAsset);
+			Online::<T>::insert(currency_id, true);
+			Self::deposit_event(Event::Created { currency_id });
+			Ok(())
+		}
+
+		/// Cancel all of some asset approved for delegated transfer by a third-party account.
+		///
+		/// Origin must be Signed and there must be an approval in place between signer and
+		/// `delegate`.
+		///
+		/// Unreserves any deposit previously reserved by `approve_transfer` for the approval.
+		///
+		/// - `id`: The identifier of the asset.
+		/// - `delegate`: The account delegated permission to transfer asset.
+		///
+		/// Emits `ApprovalCancelled` on success.
+		///
+		/// Weight: `O(1)`
+		#[pallet::weight(T::WeightInfo::cancel_approval())]
+		pub fn cancel_approval(
+			origin: OriginFor<T>,
+			id: T::CurrencyId,
+			delegate: T::AccountId,
+		) -> DispatchResult {
+			let owner = ensure_signed(origin)?;
+			let approval =
+				Approvals::<T>::take((id, &owner, &delegate)).ok_or(Error::<T>::Unknown)?;
+			Self::unreserve(id, &owner, approval.deposit);
+
+			Self::deposit_event(Event::ApprovalCancelled { asset_id: id, owner, delegate });
+			Ok(())
+		}
+
+		/// Approve an amount of asset for transfer by a delegated third-party account.
+		///
+		/// Origin must be Signed.
+		///
+		/// Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account
+		/// for the purpose of holding the approval. If some non-zero amount of assets is already
+		/// approved from signing account to `delegate`, then it is topped up or unreserved to
+		/// meet the right value.
+		///
+		/// NOTE: The signing account does not need to own `amount` of assets at the point of
+		/// making this call.
+		///
+		/// - `id`: The identifier of the asset.
+		/// - `delegate`: The account to delegate permission to transfer asset.
+		/// - `amount`: The amount of asset that may be transferred by `delegate`. If there is
+		/// already an approval in place, then this acts additively.
+		///
+		/// Emits `ApprovedTransfer` on success.
+		///
+		/// Weight: `O(1)`
+		#[pallet::weight(T::WeightInfo::approve_transfer())]
+		pub fn approve_transfer(
+			origin: OriginFor<T>,
+			id: T::CurrencyId,
+			delegate: T::AccountId,
+			amount: T::Balance,
+		) -> DispatchResult {
+			let owner = ensure_signed(origin)?;
+			Self::do_approve_transfer(id, &owner, &delegate, amount)
+		}
+
+		/// Transfer some asset balance from a previously delegated account to some third-party
+		/// account.
+		///
+		/// Origin must be Signed and there must be an approval in place by the `owner` to the
+		/// signer.
+		///
+		/// If the entire amount approved for transfer is transferred, then any deposit previously
+		/// reserved by `approve_transfer` is unreserved.
+		///
+		/// - `id`: The identifier of the asset.
+		/// - `owner`: The account which previously approved for a transfer of at least `amount` and
+		/// from which the asset balance will be withdrawn.
+		/// - `destination`: The account to which the asset balance of `amount` will be transferred.
+		/// - `amount`: The amount of assets to transfer.
+		///
+		/// Emits `TransferredApproved` on success.
+		///
+		/// Weight: `O(1)`
+		#[pallet::weight(T::WeightInfo::transfer_approved())]
+		pub fn transfer_approved(
+			origin: OriginFor<T>,
+			id: T::CurrencyId,
+			owner: T::AccountId,
+			destination: T::AccountId,
+			amount: T::Balance,
+		) -> DispatchResult {
+			let delegate = ensure_signed(origin)?;
+			Self::do_transfer_approved(id, &owner, &delegate, &destination, amount)
+		}
+
+
+
+	}
+}
+
+impl<T: Config> Pallet<T> {
+
+	// Check the amount approved to be spent by an owner to a delegate
+	pub fn allowance(
+		asset: T::CurrencyId,
+		owner: &T::AccountId,
+		delegate: &T::AccountId,
+	) -> T::Balance {
+		Approvals::<T>::get((asset, &owner, &delegate))
+			.map(|x| x.amount)
+			.unwrap_or_else(Zero::zero)
+	}
+
+
+	/// Creates an approval from `owner` to spend `amount` of asset `id` tokens by 'delegate'
+	/// while reserving `T::ApprovalDeposit` from owner
+	///
+	/// If an approval already exists, the new amount is added to such existing approval
+	pub fn do_approve_transfer(
+		id: T::CurrencyId,
+		owner: &T::AccountId,
+		delegate: &T::AccountId,
+		amount: T::Balance,
+	) -> DispatchResult {
+	    let _ = Self::get_asset(&id)?;
+		Approvals::<T>::try_mutate(
+			(id, &owner, &delegate),
+			|maybe_approved| -> DispatchResult {
+				let mut approved = match maybe_approved.take() {
+					// an approval already exists and is being updated
+					Some(a) => a,
+					// a new approval is created
+					None => {
+						Default::default()
+					},
+				};
+				let deposit_required: T::Balance = T::ApprovalDeposit::get();
+				if approved.deposit < deposit_required {
+					Self::reserve(id, owner, deposit_required - approved.deposit)?;
+					approved.deposit = deposit_required;
+				}
+				approved.amount = approved.amount.saturating_add(amount);
+				*maybe_approved = Some(approved);
+				Ok(())
+			},
+		)?;
+		Self::deposit_event(Event::ApprovedTransfer {
+			asset_id: id,
+			source: owner.clone(),
+			delegate: delegate.clone(),
+			amount,
+		});
+		Ok(())
+	}
+
+	/// Reduces the asset `id` balance of `owner` by some `amount` and increases the balance of
+	/// `dest` by (similar) amount, checking that 'delegate' has an existing approval from `owner`
+	/// to spend`amount`.
+	///
+	/// Will fail if `amount` is greater than the approval from `owner` to 'delegate'
+	/// Will unreserve the deposit from `owner` if the entire approved `amount` is spent by
+	/// 'delegate'
+	pub fn do_transfer_approved(
+		id: T::CurrencyId,
+		owner: &T::AccountId,
+		delegate: &T::AccountId,
+		destination: &T::AccountId,
+		amount: T::Balance,
+	) -> DispatchResult {
+		Approvals::<T>::try_mutate_exists(
+			(id, &owner, delegate),
+			|maybe_approved| -> DispatchResult {
+				let mut approved = maybe_approved.take().ok_or(Error::<T>::Unapproved)?;
+				let remaining =
+					approved.amount.checked_sub(&amount).ok_or(Error::<T>::Unapproved)?;
+
+				Self::do_transfer(id, owner, destination, amount, ExistenceRequirement::AllowDeath)?;
+
+				if remaining.is_zero() {
+					Self::unreserve(id, owner, approved.deposit);
+				} else {
+					approved.amount = remaining;
+					*maybe_approved = Some(approved);
+				}
+				Ok(())
+			},
+		)?;
+
+		Ok(())
+	}
+
+
+	/// check the currency_id is existed
+	#[inline]
+	pub fn get_asset(
+		currency_id: &T::CurrencyId,
+	) -> result::Result<AssetInfo<BoundedVec<u8, T::StringLimit>>, DispatchError> {
+		if let Some(asset) = Self::asset_info_of(currency_id) {
+			if Self::online(currency_id) {
+				Ok(asset)
+			} else {
+				Err(Error::<T>::InvalidAsset)?
+			}
+		} else {
+			Err(Error::<T>::NotExistedAsset)?
+		}
+	}
+
+	/// Creates an asset.
+	///
+	/// # Arguments
+	/// * `currency_id`: An ID of a reserved asset.
+	pub fn create_asset(
+		currency_id: T::CurrencyId,
+		asset_info: AssetInfo<BoundedVec<u8, T::StringLimit>>,
+	) -> DispatchResult {
+		// make sure the asset id is not exist
+		ensure!(Self::asset_info_of(&currency_id).is_none(), Error::<T>::ExistedAsset);
+
+		ensure!(
+			asset_info.symbol.len() <= rp_protocol::ASSET_SYMBOL_LEN,
+			Error::<T>::InvalidAssetInfo
+		);
+		ensure!(
+			asset_info.name.len() <= rp_protocol::ASSET_NAME_LEN,
+			Error::<T>::InvalidAssetInfo
+		);
+		ensure!(
+			asset_info.desc.len() <= rp_protocol::ASSET_DESC_LEN,
+			Error::<T>::InvalidAssetInfo
+		);
+		ensure!(asset_info.decimals != 0, Error::<T>::InvalidAssetInfo);
+
+		info!(
+			"[create_asset]|currency_id:{:?}, symbol:{:?}",
+			currency_id, asset_info.symbol
+		);
+
+		<AssetInfos<T>>::insert(currency_id, asset_info);
+		Online::<T>::insert(currency_id, true);
+
+		Self::deposit_event(Event::Created { currency_id });
+
+		Ok(())
+	}
+
+	pub fn total_asset_infos(
+	) -> BTreeMap<T::CurrencyId, TotalAssetInfo<AssetInfo<BoundedVec<u8, T::StringLimit>>, T::Balance>> {
+		AssetInfos::<T>::iter()
+			.map(|(id, info)| {
+				(
+					id,
+					TotalAssetInfo {
+						info,
+						balance: Self::total_issuance(id),
+						is_online: Self::online(id),
+						restrictions: Self::asset_restrictions(id),
+					},
+				)
+			})
+			.collect()
 	}
 }
 
@@ -703,6 +1136,9 @@
 		who: &T::AccountId,
 		amount: T::Balance,
 	) -> DispatchResult {
+		let _ = Self::get_asset(&currency_id)?;
+		Self::can_do(&currency_id, Restriction::Withdrawable)?;
+
 		if amount.is_zero() {
 			return Ok(());
 		}
@@ -890,6 +1326,9 @@
 		amount: T::Balance,
 		existence_requirement: ExistenceRequirement,
 	) -> DispatchResult {
+		let _ = Self::get_asset(&currency_id)?;
+		Self::can_do(&currency_id, Restriction::Transferable)?;
+
 		if amount.is_zero() || from == to {
 			return Ok(());
 		}
@@ -957,6 +1396,9 @@
 		existence_requirement: ExistenceRequirement,
 		change_total_issuance: bool,
 	) -> DispatchResult {
+		let _ = Self::get_asset(&currency_id)?;
+		Self::can_do(&currency_id, Restriction::Withdrawable)?;
+
 		if amount.is_zero() {
 			return Ok(());
 		}
@@ -1015,6 +1457,9 @@
 		require_existed: bool,
 		change_total_issuance: bool,
 	) -> DispatchResult {
+		let _ = Self::get_asset(&currency_id)?;
+		Self::can_do(&currency_id, Restriction::Depositable)?;
+
 		if amount.is_zero() {
 			return Ok(());
 		}
@@ -1096,6 +1541,10 @@
 
 	// Check if `value` amount of free balance can be slashed from `who`.
 	fn can_slash(currency_id: Self::CurrencyId, who: &T::AccountId, value: Self::Balance) -> bool {
+		if Self::get_asset(&currency_id).is_err() || Self::can_do(&currency_id, Restriction::Slashable).is_err() {
+			return false;
+		}
+
 		if value.is_zero() {
 			return true;
 		}
@@ -1265,6 +1714,10 @@
 	///
 	/// Always `true` if value to be reserved is zero.
 	fn can_reserve(currency_id: Self::CurrencyId, who: &T::AccountId, value: Self::Balance) -> bool {
+		if Self::get_asset(&currency_id).is_err() || Self::can_do(&currency_id, Restriction::Reservable).is_err() {
+			return false;
+		}
+
 		if value.is_zero() {
 			return true;
 		}
@@ -1306,6 +1759,9 @@
 	///
 	/// Is a no-op if value to be reserved is zero.
 	fn reserve(currency_id: Self::CurrencyId, who: &T::AccountId, value: Self::Balance) -> DispatchResult {
+		let _ = Self::get_asset(&currency_id)?;
+		Self::can_do(&currency_id, Restriction::Reservable)?;
+
 		if value.is_zero() {
 			return Ok(());
 		}
@@ -1329,6 +1785,10 @@
 	///
 	/// Is a no-op if the value to be unreserved is zero.
 	fn unreserve(currency_id: Self::CurrencyId, who: &T::AccountId, value: Self::Balance) -> Self::Balance {
+		if Self::get_asset(&currency_id).is_err() || Self::can_do(&currency_id, Restriction::Unreservable).is_err() {
+			return Zero::zero();
+		}
+
 		if value.is_zero() {
 			return value;
 		}
