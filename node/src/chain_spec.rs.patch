--- node/src/chain_spec.rs.tmp
+++ node/src/chain_spec.rs
@@ -1,14 +1,18 @@
 use cumulus_primitives_core::ParaId;
-use parachain_template_runtime::{AccountId, AuraId, Signature, EXISTENTIAL_DEPOSIT};
+use frame_support::{traits::ConstU32, BoundedVec};
+use parachain_rio_runtime::{
+	AccountId, AssetInfo, AuraId, Balance, CurrencyId, EVMConfig, EthereumConfig, RioAssetsConfig,
+	RioGatewayConfig, Signature, Text, EXISTENTIAL_DEPOSIT,
+};
 use sc_chain_spec::{ChainSpecExtension, ChainSpecGroup};
 use sc_service::ChainType;
 use serde::{Deserialize, Serialize};
 use sp_core::{sr25519, Pair, Public};
 use sp_runtime::traits::{IdentifyAccount, Verify};
+use std::{collections::BTreeMap, convert::TryFrom, str::FromStr};
 
 /// Specialized `ChainSpec` for the normal parachain runtime.
-pub type ChainSpec =
-	sc_service::GenericChainSpec<parachain_template_runtime::GenesisConfig, Extensions>;
+pub type ChainSpec = sc_service::GenericChainSpec<parachain_rio_runtime::GenesisConfig, Extensions>;
 
 /// The default XCM version to set in genesis config.
 const SAFE_XCM_VERSION: u32 = xcm::prelude::XCM_VERSION;
@@ -57,8 +61,8 @@
 /// Generate the session keys from individual elements.
 ///
 /// The input must be a tuple of individual keys (a single arg for now since we have just one key).
-pub fn template_session_keys(keys: AuraId) -> parachain_template_runtime::SessionKeys {
-	parachain_template_runtime::SessionKeys { aura: keys }
+pub fn parachain_rio_session_keys(keys: AuraId) -> parachain_rio_runtime::SessionKeys {
+	parachain_rio_runtime::SessionKeys { aura: keys }
 }
 
 pub fn development_config() -> ChainSpec {
@@ -116,6 +120,104 @@
 	)
 }
 
+macro_rules! bvec {
+	($a:expr) => {
+		Text::try_from($a.to_vec()).unwrap()
+	};
+}
+fn assets_init(
+) -> Vec<(CurrencyId, AssetInfo, rpallet_assets::Restrictions, Vec<(AccountId, Balance)>)> {
+	use rp_protocol as rp;
+	use rpallet_assets::{Chain, Restriction, Restrictions};
+	vec![
+		// asset id defined in protocol
+		(
+			CurrencyId::from(rp::LOCKED_RFUEL),
+			AssetInfo {
+				symbol: bvec!(b"LOCKED_RFUEL"),
+				name: bvec!(b"Locked Rio Fuel Token"),
+				decimals: 12,
+				desc: bvec!(b"Locked Rio Fuel Token"),
+				chain: Chain::Rio,
+			},
+			Restriction::Transferable.into(),
+			vec![],
+		),
+		(
+			CurrencyId::from(rp::OM),
+			AssetInfo {
+				symbol: bvec!(b"OM"),
+				name: bvec!(b"MANTRA DAO Token"),
+				decimals: 12,
+				desc: bvec!(b"MANTRA DAO Token"),
+				chain: Chain::Rio,
+			},
+			Restrictions::none(),
+			vec![],
+		),
+		(
+			CurrencyId::from(rp::RBTC),
+			AssetInfo {
+				symbol: bvec!(b"RBTC"),
+				name: bvec!(b"RBTC token"),
+				decimals: 8,
+				desc: bvec!(b"Bitcoin in RioChain"),
+				chain: Chain::Bitcoin,
+			},
+			Restrictions::none(),
+			vec![],
+		),
+		(
+			CurrencyId::from(rp::RLTC),
+			AssetInfo {
+				symbol: bvec!(b"RLTC"),
+				name: bvec!(b"RLTC token"),
+				decimals: 8,
+				desc: bvec!(b"Litecoin in RioChain"),
+				chain: Chain::Litecoin,
+			},
+			Restrictions::none(),
+			vec![],
+		),
+		(
+			CurrencyId::from(rp::RETH),
+			AssetInfo {
+				symbol: bvec!(b"RETH"),
+				name: bvec!(b"RETH token"),
+				decimals: 18,
+				desc: bvec!(b"Ether in RioChain"),
+				chain: Chain::Ethereum,
+			},
+			Restrictions::none(),
+			vec![],
+		),
+		(
+			CurrencyId::from(rp::RUSDT),
+			AssetInfo {
+				symbol: bvec!(b"RUSDT"),
+				name: bvec!(b"RUSDT token"),
+				decimals: 6,
+				desc: bvec!(b"USDT in RioChain"),
+				chain: Chain::Ethereum,
+			},
+			Restrictions::none(),
+			vec![],
+		),
+		(
+			CurrencyId::from(rp::STAKING_POOL_MARKER),
+			AssetInfo {
+				symbol: bvec!(b"SPM"),
+				name: bvec!(b"Staking pool marker"),
+				decimals: 12,
+				desc: bvec!(b"Staking pool marker"),
+				chain: Chain::Rio,
+			},
+			Restrictions::none(),
+			vec![],
+		),
+	]
+}
+
 pub fn local_testnet_config() -> ChainSpec {
 	// Give your base currency a unit name and decimal places
 	let mut properties = sc_chain_spec::Properties::new();
@@ -164,7 +266,7 @@
 		// Telemetry
 		None,
 		// Protocol ID
-		Some("template-local"),
+		Some("parachain-rio-local"),
 		// Fork ID
 		None,
 		// Properties
@@ -177,34 +279,41 @@
 	)
 }
 
+pub type TextL = BoundedVec<u8, ConstU32<128>>;
+macro_rules! bvec {
+	($a:expr) => {
+		TextL::try_from($a.to_vec()).unwrap()
+	};
+}
+
 fn testnet_genesis(
 	invulnerables: Vec<(AccountId, AuraId)>,
 	endowed_accounts: Vec<AccountId>,
 	id: ParaId,
-) -> parachain_template_runtime::GenesisConfig {
-	parachain_template_runtime::GenesisConfig {
-		system: parachain_template_runtime::SystemConfig {
-			code: parachain_template_runtime::WASM_BINARY
+) -> parachain_rio_runtime::GenesisConfig {
+	parachain_rio_runtime::GenesisConfig {
+		system: parachain_rio_runtime::SystemConfig {
+			code: parachain_rio_runtime::WASM_BINARY
 				.expect("WASM binary was not build, please build it!")
 				.to_vec(),
 		},
-		balances: parachain_template_runtime::BalancesConfig {
+		balances: parachain_rio_runtime::BalancesConfig {
 			balances: endowed_accounts.iter().cloned().map(|k| (k, 1 << 60)).collect(),
 		},
-		parachain_info: parachain_template_runtime::ParachainInfoConfig { parachain_id: id },
-		collator_selection: parachain_template_runtime::CollatorSelectionConfig {
+		parachain_info: parachain_rio_runtime::ParachainInfoConfig { parachain_id: id },
+		collator_selection: parachain_rio_runtime::CollatorSelectionConfig {
 			invulnerables: invulnerables.iter().cloned().map(|(acc, _)| acc).collect(),
 			candidacy_bond: EXISTENTIAL_DEPOSIT * 16,
 			..Default::default()
 		},
-		session: parachain_template_runtime::SessionConfig {
+		session: parachain_rio_runtime::SessionConfig {
 			keys: invulnerables
 				.into_iter()
 				.map(|(acc, aura)| {
 					(
-						acc.clone(),                 // account id
-						acc,                         // validator id
-						template_session_keys(aura), // session keys
+						acc.clone(),                      // account id
+						acc,                              // validator id
+						parachain_rio_session_keys(aura), // session keys
 					)
 				})
 				.collect(),
@@ -214,8 +323,36 @@
 		aura: Default::default(),
 		aura_ext: Default::default(),
 		parachain_system: Default::default(),
-		polkadot_xcm: parachain_template_runtime::PolkadotXcmConfig {
+		polkadot_xcm: parachain_rio_runtime::PolkadotXcmConfig {
 			safe_xcm_version: Some(SAFE_XCM_VERSION),
 		},
+		evm: EVMConfig { accounts: BTreeMap::new() },
+		ethereum: EthereumConfig {},
+		dynamic_fee: Default::default(),
+		base_fee: Default::default(),
+		rio_gateway: RioGatewayConfig {
+			max_deposit_index: 10000,
+			initial_supported_currencies: vec![
+				(CurrencyId::from(rp_protocol::RFUEL), 10 * 1_000_000_000_000_000_000), // 10 RFUEL
+				(CurrencyId::from(rp_protocol::OM), 10 * 1_000_000_000_000_000_000),
+				(CurrencyId::from(rp_protocol::RBTC), 5 * 100_000),  // 0.005 BTC
+				(CurrencyId::from(rp_protocol::RETH), 5 * 1_000_000_000_000_000_000),  // 0.05 ETH
+				(CurrencyId::from(rp_protocol::RUSDT), 5 * 1_000_000), // 5 USDT
+			],
+			deposit_addr_info: vec![(
+				CurrencyId::from(rp_protocol::RBTC),
+				rpallet_gateway::DepositAddrInfo::Bip32(
+					rpallet_gateway::Bip32 {
+						x_pub: bvec!(b"upub5DRdTWfz3NeZwd25HeQ2xMNjnYtYRfZzC6fEDjmPH2AwnxjvTrySjVApEiDufv68gqsZ7TCUcNfb1P4KLjNvZCTsPCaVb68SLedQwPKMLKR"),
+						path: bvec!(b"m/49'/1'/0")
+					}
+				)
+			)],
+			admins: vec![(
+				get_account_id_from_seed::<sr25519::Public>("Alice"),
+				rpallet_gateway::Auths::all(),
+			)],
+		},
+		rio_assets: RioAssetsConfig { init: assets_init() },
 	}
 }
