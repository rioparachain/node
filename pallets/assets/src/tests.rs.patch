--- pallets/assets/src/tests.rs.tmp
+++ pallets/assets/src/tests.rs
@@ -5,13 +5,29 @@
 use super::*;
 use frame_support::{assert_noop, assert_ok};
 use frame_system::RawOrigin;
-use mock::*;
+use mock::{Event, *};
 use sp_runtime::{traits::BadOrigin, TokenError};
 
 // *************************************************
 // tests for genesis
 // *************************************************
 
+macro_rules! bvec {
+	($a:expr) => {
+		Text::try_from($a.to_vec()).unwrap()
+	};
+}
+
+fn get_asset_info() -> AssetInfo<Text> {
+	AssetInfo {
+		symbol: bvec!(b"RFUEL"),
+		name: bvec!(b"Rfuel"),
+		decimals: 12,
+		desc: bvec!(b"Rfuel"),
+		chain: Chain::Rio,
+	}
+}
+
 #[test]
 fn genesis_issuance_should_work() {
 	ExtBuilder::default()
@@ -36,7 +52,7 @@
 		.build()
 		.execute_with(|| {
 			assert_ok!(Tokens::transfer(Some(ALICE).into(), BOB, DOT, 50));
-			System::assert_last_event(RuntimeEvent::Tokens(crate::Event::Transfer {
+			System::assert_last_event(Event::Tokens(crate::Event::Transfer {
 				currency_id: DOT,
 				from: ALICE,
 				to: BOB,
@@ -55,7 +71,7 @@
 				Error::<Runtime>::ExistentialDeposit,
 			);
 			assert_ok!(Tokens::transfer(Some(ALICE).into(), CHARLIE, DOT, 2));
-			assert_eq!(TrackCreatedAccounts::<Runtime>::accounts(), vec![(CHARLIE, DOT)]);
+			assert_eq!(TrackCreatedAccounts::accounts(), vec![(CHARLIE, DOT)]);
 
 			// imply AllowDeath
 			assert!(Accounts::<Runtime>::contains_key(ALICE, DOT));
@@ -83,7 +99,7 @@
 			);
 
 			assert_ok!(Tokens::transfer_keep_alive(Some(ALICE).into(), BOB, DOT, 98));
-			System::assert_last_event(RuntimeEvent::Tokens(crate::Event::Transfer {
+			System::assert_last_event(Event::Tokens(crate::Event::Transfer {
 				currency_id: DOT,
 				from: ALICE,
 				to: BOB,
@@ -102,7 +118,7 @@
 		.execute_with(|| {
 			assert_eq!(Tokens::free_balance(DOT, &ALICE), 100);
 			assert_ok!(Tokens::transfer_all(Some(ALICE).into(), CHARLIE, DOT, true));
-			System::assert_has_event(RuntimeEvent::Tokens(crate::Event::Transfer {
+			System::assert_has_event(Event::Tokens(crate::Event::Transfer {
 				currency_id: DOT,
 				from: ALICE,
 				to: CHARLIE,
@@ -114,7 +130,7 @@
 			assert_eq!(Tokens::accounts(&BOB, DOT).frozen, 50);
 			assert_eq!(Tokens::free_balance(DOT, &BOB), 100);
 			assert_ok!(Tokens::transfer_all(Some(BOB).into(), CHARLIE, DOT, true));
-			System::assert_has_event(RuntimeEvent::Tokens(crate::Event::Transfer {
+			System::assert_has_event(Event::Tokens(crate::Event::Transfer {
 				currency_id: DOT,
 				from: BOB,
 				to: CHARLIE,
@@ -132,8 +148,8 @@
 			assert!(Accounts::<Runtime>::contains_key(ALICE, DOT));
 			assert_eq!(Tokens::free_balance(DOT, &ALICE), 100);
 			assert_ok!(Tokens::transfer_all(Some(ALICE).into(), CHARLIE, DOT, false));
-			assert_eq!(TrackCreatedAccounts::<Runtime>::accounts(), vec![(CHARLIE, DOT)]);
-			System::assert_last_event(RuntimeEvent::Tokens(crate::Event::Transfer {
+			assert_eq!(TrackCreatedAccounts::accounts(), vec![(CHARLIE, DOT)]);
+			System::assert_last_event(Event::Tokens(crate::Event::Transfer {
 				currency_id: DOT,
 				from: ALICE,
 				to: CHARLIE,
@@ -141,13 +157,13 @@
 			}));
 			assert!(!Accounts::<Runtime>::contains_key(ALICE, DOT));
 			assert_eq!(Tokens::free_balance(DOT, &ALICE), 0);
-			assert_eq!(TrackKilledAccounts::<Runtime>::accounts(), vec![(ALICE, DOT)]);
+			assert_eq!(TrackKilledAccounts::accounts(), vec![(ALICE, DOT)]);
 
 			assert_ok!(Tokens::set_lock(ID_1, DOT, &BOB, 50));
 			assert_eq!(Tokens::accounts(&BOB, DOT).frozen, 50);
 			assert_eq!(Tokens::free_balance(DOT, &BOB), 100);
 			assert_ok!(Tokens::transfer_all(Some(BOB).into(), CHARLIE, DOT, false));
-			System::assert_last_event(RuntimeEvent::Tokens(crate::Event::Transfer {
+			System::assert_last_event(Event::Tokens(crate::Event::Transfer {
 				currency_id: DOT,
 				from: BOB,
 				to: CHARLIE,
@@ -172,97 +188,98 @@
 
 			// imply AllowDeath
 			assert_ok!(Tokens::force_transfer(RawOrigin::Root.into(), ALICE, BOB, DOT, 100));
-			System::assert_last_event(RuntimeEvent::Tokens(crate::Event::Transfer {
+			System::assert_last_event(Event::Tokens(crate::Event::Transfer {
 				currency_id: DOT,
 				from: ALICE,
 				to: BOB,
 				amount: 100,
 			}));
 			assert!(!Accounts::<Runtime>::contains_key(ALICE, DOT));
-			assert_eq!(TrackKilledAccounts::<Runtime>::accounts(), vec![(ALICE, DOT)]);
+			assert_eq!(TrackKilledAccounts::accounts(), vec![(ALICE, DOT)]);
 			assert_eq!(Tokens::free_balance(DOT, &ALICE), 0);
 			assert_eq!(Tokens::free_balance(DOT, &BOB), 200);
 		});
 }
 
-#[test]
-fn set_balance_should_work() {
-	ExtBuilder::default()
-		.balances(vec![(ALICE, DOT, 100), (BOB, DOT, 100)])
-		.build()
-		.execute_with(|| {
-			// bad origin
-			assert_noop!(Tokens::set_balance(Some(ALICE).into(), ALICE, DOT, 200, 100), BadOrigin);
-
-			// total balance overflow
-			assert_noop!(
-				Tokens::set_balance(RawOrigin::Root.into(), ALICE, DOT, Balance::max_value(), 1),
-				ArithmeticError::Overflow
-			);
-
-			// total issurance overflow
-			assert_noop!(
-				Tokens::set_balance(RawOrigin::Root.into(), ALICE, DOT, Balance::max_value(), 0),
-				ArithmeticError::Overflow
-			);
-
-			// total issurance overflow
-			assert_noop!(
-				Tokens::set_balance(RawOrigin::Root.into(), ALICE, DOT, Balance::max_value(), 0),
-				ArithmeticError::Overflow
-			);
-
-			assert!(Accounts::<Runtime>::contains_key(ALICE, DOT));
-			assert_eq!(Tokens::free_balance(DOT, &ALICE), 100);
-			assert_eq!(Tokens::reserved_balance(DOT, &ALICE), 0);
-			assert_eq!(Tokens::total_issuance(DOT), 200);
-
-			assert_ok!(Tokens::set_balance(RawOrigin::Root.into(), ALICE, DOT, 200, 100));
-			System::assert_has_event(RuntimeEvent::Tokens(crate::Event::BalanceSet {
-				currency_id: DOT,
-				who: ALICE,
-				free: 200,
-				reserved: 100,
-			}));
-			assert!(Accounts::<Runtime>::contains_key(ALICE, DOT));
-			assert_eq!(Tokens::free_balance(DOT, &ALICE), 200);
-			assert_eq!(Tokens::reserved_balance(DOT, &ALICE), 100);
-			assert_eq!(Tokens::total_issuance(DOT), 400);
-
-			assert!(Accounts::<Runtime>::contains_key(BOB, DOT));
-			assert_eq!(Tokens::free_balance(DOT, &BOB), 100);
-			assert_eq!(Tokens::reserved_balance(DOT, &BOB), 0);
-
-			assert_ok!(Tokens::set_balance(RawOrigin::Root.into(), BOB, DOT, 0, 0));
-			System::assert_has_event(RuntimeEvent::Tokens(crate::Event::BalanceSet {
-				currency_id: DOT,
-				who: BOB,
-				free: 0,
-				reserved: 0,
-			}));
-			assert!(!Accounts::<Runtime>::contains_key(BOB, DOT));
-			assert_eq!(Tokens::free_balance(DOT, &BOB), 0);
-			assert_eq!(Tokens::reserved_balance(DOT, &BOB), 0);
-			assert_eq!(Tokens::total_issuance(DOT), 300);
-
-			assert!(!Accounts::<Runtime>::contains_key(CHARLIE, DOT));
-			assert_eq!(Tokens::free_balance(DOT, &CHARLIE), 0);
-			assert_eq!(Tokens::reserved_balance(DOT, &CHARLIE), 0);
-
-			// below ED,
-			assert_ok!(Tokens::set_balance(RawOrigin::Root.into(), CHARLIE, DOT, 1, 0));
-			System::assert_has_event(RuntimeEvent::Tokens(crate::Event::BalanceSet {
-				currency_id: DOT,
-				who: CHARLIE,
-				free: 0,
-				reserved: 0,
-			}));
-			assert!(!Accounts::<Runtime>::contains_key(CHARLIE, DOT));
-			assert_eq!(Tokens::free_balance(DOT, &CHARLIE), 0);
-			assert_eq!(Tokens::reserved_balance(DOT, &CHARLIE), 0);
-			assert_eq!(Tokens::total_issuance(DOT), 300);
-		});
-}
+// #[test]
+// fn set_balance_should_work() {
+// 	ExtBuilder::default()
+// 		.balances(vec![(ALICE, DOT, 100), (BOB, DOT, 100)])
+// 		.build()
+// 		.execute_with(|| {
+// 			// bad origin
+// 			assert_noop!(Tokens::set_balance(Some(ALICE).into(), ALICE, DOT, 200, 100),
+// BadOrigin);
+//
+// 			// total balance overflow
+// 			assert_noop!(
+// 				Tokens::set_balance(RawOrigin::Root.into(), ALICE, DOT, Balance::max_value(),
+// 1), 				ArithmeticError::Overflow
+// 			);
+//
+// 			// total issurance overflow
+// 			assert_noop!(
+// 				Tokens::set_balance(RawOrigin::Root.into(), ALICE, DOT, Balance::max_value(),
+// 0), 				ArithmeticError::Overflow
+// 			);
+//
+// 			// total issurance overflow
+// 			assert_noop!(
+// 				Tokens::set_balance(RawOrigin::Root.into(), ALICE, DOT, Balance::max_value(),
+// 0), 				ArithmeticError::Overflow
+// 			);
+//
+// 			assert!(Accounts::<Runtime>::contains_key(ALICE, DOT));
+// 			assert_eq!(Tokens::free_balance(DOT, &ALICE), 100);
+// 			assert_eq!(Tokens::reserved_balance(DOT, &ALICE), 0);
+// 			assert_eq!(Tokens::total_issuance(DOT), 200);
+//
+// 			assert_ok!(Tokens::set_balance(RawOrigin::Root.into(), ALICE, DOT, 200,
+// 100)); 			System::assert_has_event(Event::Tokens(crate::Event::BalanceSet {
+// 				currency_id: DOT,
+// 				who: ALICE,
+// 				free: 200,
+// 				reserved: 100,
+// 			}));
+// 			assert!(Accounts::<Runtime>::contains_key(ALICE, DOT));
+// 			assert_eq!(Tokens::free_balance(DOT, &ALICE), 200);
+// 			assert_eq!(Tokens::reserved_balance(DOT, &ALICE), 100);
+// 			assert_eq!(Tokens::total_issuance(DOT), 400);
+//
+// 			assert!(Accounts::<Runtime>::contains_key(BOB, DOT));
+// 			assert_eq!(Tokens::free_balance(DOT, &BOB), 100);
+// 			assert_eq!(Tokens::reserved_balance(DOT, &BOB), 0);
+//
+// 			assert_ok!(Tokens::set_balance(RawOrigin::Root.into(), BOB, DOT, 0, 0));
+// 			System::assert_has_event(Event::Tokens(crate::Event::BalanceSet {
+// 				currency_id: DOT,
+// 				who: BOB,
+// 				free: 0,
+// 				reserved: 0,
+// 			}));
+// 			assert!(!Accounts::<Runtime>::contains_key(BOB, DOT));
+// 			assert_eq!(Tokens::free_balance(DOT, &BOB), 0);
+// 			assert_eq!(Tokens::reserved_balance(DOT, &BOB), 0);
+// 			assert_eq!(Tokens::total_issuance(DOT), 300);
+//
+// 			assert!(!Accounts::<Runtime>::contains_key(CHARLIE, DOT));
+// 			assert_eq!(Tokens::free_balance(DOT, &CHARLIE), 0);
+// 			assert_eq!(Tokens::reserved_balance(DOT, &CHARLIE), 0);
+//
+// 			// below ED,
+// 			assert_ok!(Tokens::set_balance(RawOrigin::Root.into(), CHARLIE, DOT, 1, 0));
+// 			System::assert_has_event(Event::Tokens(crate::Event::BalanceSet {
+// 				currency_id: DOT,
+// 				who: CHARLIE,
+// 				free: 0,
+// 				reserved: 0,
+// 			}));
+// 			assert!(!Accounts::<Runtime>::contains_key(CHARLIE, DOT));
+// 			assert_eq!(Tokens::free_balance(DOT, &CHARLIE), 0);
+// 			assert_eq!(Tokens::reserved_balance(DOT, &CHARLIE), 0);
+// 			assert_eq!(Tokens::total_issuance(DOT), 300);
+// 		});
+// }
 
 // *************************************************
 // tests for inline impl
@@ -354,6 +371,7 @@
 #[test]
 fn withdraw_consequence_should_work() {
 	ExtBuilder::default().build().execute_with(|| {
+		assert_ok!(Pallet::<Runtime>::create_asset(DOT, get_asset_info()));
 		assert_eq!(
 			Tokens::withdraw_consequence(
 				&ALICE,
@@ -501,6 +519,7 @@
 #[test]
 fn set_free_balance_should_work() {
 	ExtBuilder::default().build().execute_with(|| {
+		assert_ok!(Pallet::<Runtime>::create_asset(DOT, get_asset_info()));
 		/* Scenarios: ED is not zero, account is not in dust removal whitelist */
 		assert!(!Accounts::<Runtime>::contains_key(ALICE, DOT));
 		assert_eq!(Tokens::free_balance(DOT, &ALICE), 0);
@@ -741,7 +760,7 @@
 				Tokens::do_transfer(DOT, &ALICE, &BOB, 99, ExistenceRequirement::AllowDeath),
 				Error::<Runtime>::KeepAlive
 			);
-
+			assert_ok!(Pallet::<Runtime>::create_asset(BTC, get_asset_info()));
 			assert_ok!(Tokens::deposit(BTC, &ALICE, 100));
 			assert!(System::can_dec_provider(&ALICE));
 			assert_ok!(Tokens::do_transfer(
@@ -963,6 +982,7 @@
 #[test]
 fn do_deposit_report_dead_account_error() {
 	ExtBuilder::default().build().execute_with(|| {
+		assert_ok!(Pallet::<Runtime>::create_asset(DOT, get_asset_info()));
 		assert!(!Accounts::<Runtime>::contains_key(CHARLIE, DOT));
 		assert_noop!(
 			Tokens::do_deposit(DOT, &CHARLIE, 10, true, true),
@@ -974,6 +994,7 @@
 #[test]
 fn do_deposit_report_existential_deposit_error() {
 	ExtBuilder::default().build().execute_with(|| {
+		assert_ok!(Pallet::<Runtime>::create_asset(DOT, get_asset_info()));
 		assert!(!Accounts::<Runtime>::contains_key(CHARLIE, DOT));
 		assert_noop!(
 			Tokens::do_deposit(DOT, &CHARLIE, 1, false, true),
@@ -1000,7 +1021,7 @@
 		assert_eq!(System::providers(&ALICE), 0);
 		assert!(!Accounts::<Runtime>::contains_key(ALICE, DOT));
 		Tokens::set_free_balance(DOT, &ALICE, 100);
-		System::assert_last_event(RuntimeEvent::Tokens(crate::Event::Endowed {
+		System::assert_last_event(Event::Tokens(crate::Event::Endowed {
 			currency_id: DOT,
 			who: ALICE,
 			amount: 100,
@@ -1084,7 +1105,7 @@
 			assert_eq!(Tokens::free_balance(DOT, &ALICE), 100);
 			assert_eq!(Tokens::free_balance(DOT, &DustReceiver::get()), 0);
 			Tokens::set_free_balance(DOT, &ALICE, 1);
-			System::assert_last_event(RuntimeEvent::Tokens(crate::Event::DustLost {
+			System::assert_last_event(Event::Tokens(crate::Event::DustLost {
 				currency_id: DOT,
 				who: ALICE,
 				amount: 1,
@@ -1103,7 +1124,7 @@
 			assert!(Accounts::<Runtime>::contains_key(DAVE, DOT));
 			assert_eq!(System::providers(&DAVE), 1);
 			assert_eq!(Tokens::free_balance(DOT, &DAVE), 1);
-			System::assert_last_event(RuntimeEvent::Tokens(crate::Event::Endowed {
+			System::assert_last_event(Event::Tokens(crate::Event::Endowed {
 				currency_id: DOT,
 				who: DAVE,
 				amount: 1,
@@ -1122,7 +1143,7 @@
 		assert!(!Accounts::<Runtime>::contains_key(ALICE, DOT));
 
 		Tokens::set_reserved_balance(DOT, &ALICE, 1);
-		System::assert_last_event(RuntimeEvent::Tokens(crate::Event::DustLost {
+		System::assert_last_event(Event::Tokens(crate::Event::DustLost {
 			currency_id: DOT,
 			who: ALICE,
 			amount: 1,
@@ -1150,122 +1171,21 @@
 		});
 }
 
-#[test]
-fn lifecycle_callbacks_are_activated() {
-	ExtBuilder::default().build().execute_with(|| {
-		assert_ok!(Tokens::set_balance(RawOrigin::Root.into(), ALICE, DOT, 200, 0));
-		assert_eq!(TrackCreatedAccounts::<Runtime>::accounts(), vec![(ALICE, DOT)]);
-
-		assert_ok!(Tokens::set_balance(RawOrigin::Root.into(), ALICE, BTC, 200, 0));
-		assert_eq!(
-			TrackCreatedAccounts::<Runtime>::accounts(),
-			vec![(ALICE, DOT), (ALICE, BTC)]
-		);
-
-		assert_ok!(Tokens::transfer_all(Some(ALICE).into(), CHARLIE, BTC, false));
-		assert_eq!(
-			TrackCreatedAccounts::<Runtime>::accounts(),
-			vec![(ALICE, DOT), (ALICE, BTC), (CHARLIE, BTC)]
-		);
-		assert_eq!(TrackKilledAccounts::<Runtime>::accounts(), vec![(ALICE, BTC)]);
-	})
-}
-
-// *************************************************
-// tests for mutation hooks (OnDeposit, OnTransfer)
-// (tests for the OnSlash hook can be found in `./tests_multicurrency.rs`)
-// *************************************************
-
-#[test]
-fn deposit_hooks_work() {
-	ExtBuilder::default().build().execute_with(|| {
-		let initial_prehook_calls = PreDeposit::<Runtime>::calls();
-		let initial_posthook_calls = PostDeposit::<Runtime>::calls();
-		assert_ok!(Tokens::do_deposit(DOT, &CHARLIE, 0, false, true),);
-		assert_eq!(PreDeposit::<Runtime>::calls(), initial_prehook_calls);
-		assert_eq!(PostDeposit::<Runtime>::calls(), initial_posthook_calls);
-
-		assert_ok!(Tokens::do_deposit(DOT, &CHARLIE, 100, false, true),);
-		assert_eq!(PreDeposit::<Runtime>::calls(), initial_prehook_calls + 1);
-		assert_eq!(PostDeposit::<Runtime>::calls(), initial_posthook_calls + 1);
-
-		assert_noop!(
-			Tokens::do_deposit(DOT, &BOB, 1, false, true),
-			Error::<Runtime>::ExistentialDeposit
-		);
-		// The prehook is called
-		assert_eq!(PreDeposit::<Runtime>::calls(), initial_prehook_calls + 2);
-		// The posthook is not called
-		assert_eq!(PostDeposit::<Runtime>::calls(), initial_posthook_calls + 1);
-	});
-}
-
-#[test]
-fn post_deposit_can_use_new_balance() {
-	ExtBuilder::default().build().execute_with(|| {
-		let initial_balance = Tokens::free_balance(DOT, &CHARLIE);
-		// The following will fail unless Charlie's new balance can be used by the hook,
-		// because `initial_balance + 100` is higher than Charlie's initial balance.
-		// If this fails, the posthook is called too soon.
-		assert_ok!(Tokens::do_deposit(DOT, &CHARLIE, initial_balance + 100, false, true),);
-	});
-}
-
-#[test]
-fn transfer_hooks_work() {
-	ExtBuilder::default()
-		.balances(vec![(ALICE, DOT, 100)])
-		.build()
-		.execute_with(|| {
-			let initial_prehook_calls = PreTransfer::<Runtime>::calls();
-			let initial_posthook_calls = PostTransfer::<Runtime>::calls();
-			assert_ok!(Tokens::do_transfer(
-				DOT,
-				&ALICE,
-				&CHARLIE,
-				0,
-				ExistenceRequirement::AllowDeath
-			),);
-			assert_eq!(PreTransfer::<Runtime>::calls(), initial_prehook_calls);
-			assert_eq!(PostTransfer::<Runtime>::calls(), initial_posthook_calls);
-
-			assert_ok!(Tokens::do_transfer(
-				DOT,
-				&ALICE,
-				&CHARLIE,
-				10,
-				ExistenceRequirement::AllowDeath
-			));
-			assert_eq!(PreTransfer::<Runtime>::calls(), initial_prehook_calls + 1);
-			assert_eq!(PostTransfer::<Runtime>::calls(), initial_posthook_calls + 1);
-
-			assert_noop!(
-				Tokens::do_transfer(DOT, &ALICE, &BOB, 1, ExistenceRequirement::AllowDeath),
-				Error::<Runtime>::ExistentialDeposit
-			);
-			// The prehook is called
-			assert_eq!(PreTransfer::<Runtime>::calls(), initial_prehook_calls + 2);
-			// The posthook is not called
-			assert_eq!(PostTransfer::<Runtime>::calls(), initial_posthook_calls + 1);
-		});
-}
-
-#[test]
-fn post_transfer_can_use_new_balance() {
-	ExtBuilder::default()
-		.balances(vec![(ALICE, DOT, 100)])
-		.build()
-		.execute_with(|| {
-			let initial_balance = Tokens::free_balance(DOT, &CHARLIE);
-			// The following will fail unless Charlie's new balance can be used by the hook,
-			// because `initial_balance + 100` is higher than Charlie's initial balance.
-			// If this fails, the posthook is called too soon.
-			assert_ok!(Tokens::do_transfer(
-				DOT,
-				&ALICE,
-				&CHARLIE,
-				initial_balance + 100,
-				ExistenceRequirement::AllowDeath
-			));
-		});
-}
+// #[test]
+// fn lifecycle_callbacks_are_activated() {
+// 	ExtBuilder::default().build().execute_with(|| {
+// 		assert_ok!(Tokens::set_balance(RawOrigin::Root.into(), ALICE, DOT, 200, 0));
+// 		assert_eq!(TrackCreatedAccounts::accounts(), vec![(ALICE, DOT)]);
+//
+// 		assert_ok!(Tokens::set_balance(RawOrigin::Root.into(), ALICE, BTC, 200, 0));
+// 		assert_eq!(TrackCreatedAccounts::accounts(), vec![(ALICE, DOT), (ALICE,
+// BTC)]);
+//
+// 		assert_ok!(Tokens::transfer_all(Some(ALICE).into(), CHARLIE, BTC, false));
+// 		assert_eq!(
+// 			TrackCreatedAccounts::accounts(),
+// 			vec![(ALICE, DOT), (ALICE, BTC), (CHARLIE, BTC)]
+// 		);
+// 		assert_eq!(TrackKilledAccounts::accounts(), vec![(ALICE, BTC)]);
+// 	})
+// }
