--- pallets/assets/src/tests_fungibles.rs.tmp
+++ pallets/assets/src/tests_fungibles.rs
@@ -5,7 +5,6 @@
 use super::*;
 use frame_support::{assert_noop, assert_ok};
 use mock::*;
-use sp_runtime::{ArithmeticError, TokenError};
 
 #[test]
 fn fungibles_inspect_trait_should_work() {
@@ -22,18 +21,18 @@
 			);
 			assert_ok!(<Tokens as fungibles::Inspect<_>>::can_deposit(DOT, &ALICE, 1, false).into_result());
 			assert_ok!(<Tokens as fungibles::Inspect<_>>::can_withdraw(DOT, &ALICE, 1).into_result());
-
-			assert!(<Tokens as fungibles::Inspect<_>>::asset_exists(DOT));
-			assert!(!<Tokens as fungibles::Inspect<_>>::asset_exists(BTC));
 		});
 }
 
 #[test]
 fn fungibles_mutate_trait_should_work() {
-	ExtBuilder::default().build().execute_with(|| {
-		assert_ok!(<Tokens as fungibles::Mutate<_>>::mint_into(DOT, &ALICE, 10));
-		assert_eq!(<Tokens as fungibles::Mutate<_>>::burn_from(DOT, &ALICE, 8), Ok(8));
-	});
+	ExtBuilder::default()
+		.balances(vec![(ALICE, DOT, 100)])
+		.build()
+		.execute_with(|| {
+			assert_ok!(<Tokens as fungibles::Mutate<_>>::mint_into(DOT, &ALICE, 10));
+			assert_eq!(<Tokens as fungibles::Mutate<_>>::burn_from(DOT, &ALICE, 8), Ok(8));
+		});
 }
 
 #[test]
@@ -58,115 +57,13 @@
 		.balances(vec![(ALICE, DOT, 100)])
 		.build()
 		.execute_with(|| {
-			// set_balance
 			assert_eq!(<Tokens as fungibles::Inspect<_>>::balance(DOT, &ALICE), 100);
 			assert_ok!(<Tokens as fungibles::Unbalanced<_>>::set_balance(DOT, &ALICE, 10));
 			assert_eq!(<Tokens as fungibles::Inspect<_>>::balance(DOT, &ALICE), 10);
 
-			// set_total_issuance
 			assert_eq!(<Tokens as fungibles::Inspect<_>>::total_issuance(DOT), 100);
 			<Tokens as fungibles::Unbalanced<_>>::set_total_issuance(DOT, 10);
 			assert_eq!(<Tokens as fungibles::Inspect<_>>::total_issuance(DOT), 10);
-
-			// decrease_balance
-			assert_eq!(<Tokens as fungibles::Inspect<_>>::balance(DOT, &ALICE), 10);
-			assert_noop!(
-				<Tokens as fungibles::Unbalanced<_>>::decrease_balance(DOT, &ALICE, 20),
-				TokenError::NoFunds
-			);
-			assert_eq!(
-				<Tokens as fungibles::Unbalanced<_>>::decrease_balance(DOT, &ALICE, 5),
-				Ok(5)
-			);
-			assert_eq!(<Tokens as fungibles::Inspect<_>>::balance(DOT, &ALICE), 5);
-			// new balance < ExistentialDeposits, clean dust
-			assert_eq!(
-				<Tokens as fungibles::Unbalanced<_>>::decrease_balance(DOT, &ALICE, 4),
-				Ok(5)
-			);
-			assert_eq!(<Tokens as fungibles::Inspect<_>>::balance(DOT, &ALICE), 0);
-			// set reserved
-			assert_ok!(<Tokens as fungibles::Unbalanced<_>>::set_balance(DOT, &ALICE, 100));
-			assert_ok!(<Tokens as MultiReservableCurrency<AccountId>>::reserve(DOT, &ALICE, 50));
-			assert_noop!(
-				<Tokens as fungibles::Unbalanced<_>>::decrease_balance(DOT, &ALICE, 60),
-				TokenError::NoFunds
-			);
-			assert_eq!(
-				<Tokens as fungibles::Unbalanced<_>>::decrease_balance(DOT, &ALICE, 50),
-				Ok(50)
-			);
-			assert_eq!(<Tokens as fungibles::Inspect<_>>::balance(DOT, &ALICE), 50);
-			assert_eq!(
-				<Tokens as MultiReservableCurrency<AccountId>>::unreserve(DOT, &ALICE, 50),
-				0
-			);
-			assert_eq!(<Tokens as fungibles::Inspect<_>>::balance(DOT, &ALICE), 50);
-
-			// decrease_balance_at_most
-			assert_ok!(<Tokens as fungibles::Unbalanced<_>>::set_balance(DOT, &ALICE, 10));
-			assert_eq!(<Tokens as fungibles::Inspect<_>>::balance(DOT, &ALICE), 10);
-			assert_eq!(
-				<Tokens as fungibles::Unbalanced<_>>::decrease_balance_at_most(DOT, &ALICE, 20),
-				10
-			);
-			assert_ok!(<Tokens as fungibles::Unbalanced<_>>::set_balance(DOT, &ALICE, 10));
-			assert_eq!(
-				<Tokens as fungibles::Unbalanced<_>>::decrease_balance_at_most(DOT, &ALICE, 5),
-				5
-			);
-			assert_eq!(<Tokens as fungibles::Inspect<_>>::balance(DOT, &ALICE), 5);
-			// new balance < ExistentialDeposits, clean dust
-			assert_eq!(
-				<Tokens as fungibles::Unbalanced<_>>::decrease_balance_at_most(DOT, &ALICE, 4),
-				5
-			);
-			assert_eq!(<Tokens as fungibles::Inspect<_>>::balance(DOT, &ALICE), 0);
-			// set reserved
-			assert_ok!(<Tokens as fungibles::Unbalanced<_>>::set_balance(DOT, &ALICE, 100));
-			assert_ok!(<Tokens as MultiReservableCurrency<AccountId>>::reserve(DOT, &ALICE, 50));
-			assert_eq!(
-				<Tokens as fungibles::Unbalanced<_>>::decrease_balance_at_most(DOT, &ALICE, 60),
-				50,
-			);
-			assert_eq!(<Tokens as fungibles::Inspect<_>>::balance(DOT, &ALICE), 50);
-			assert_eq!(
-				<Tokens as MultiReservableCurrency<AccountId>>::unreserve(DOT, &ALICE, 50),
-				0
-			);
-			assert_eq!(<Tokens as fungibles::Inspect<_>>::balance(DOT, &ALICE), 50);
-
-			// increase_balance
-			assert_ok!(<Tokens as fungibles::Unbalanced<_>>::set_balance(DOT, &ALICE, 0));
-			assert_noop!(
-				<Tokens as fungibles::Unbalanced<_>>::increase_balance(DOT, &ALICE, 1),
-				TokenError::BelowMinimum
-			);
-			assert_eq!(
-				<Tokens as fungibles::Unbalanced<_>>::increase_balance(DOT, &ALICE, 2),
-				Ok(2)
-			);
-			assert_eq!(<Tokens as fungibles::Inspect<_>>::balance(DOT, &ALICE), 2);
-			assert_noop!(
-				<Tokens as fungibles::Unbalanced<_>>::increase_balance(DOT, &ALICE, Balance::MAX),
-				ArithmeticError::Overflow
-			);
-
-			// increase_balance_at_most
-			assert_ok!(<Tokens as fungibles::Unbalanced<_>>::set_balance(DOT, &ALICE, 0));
-			assert_eq!(
-				<Tokens as fungibles::Unbalanced<_>>::increase_balance_at_most(DOT, &ALICE, 1),
-				0
-			);
-			assert_eq!(
-				<Tokens as fungibles::Unbalanced<_>>::increase_balance_at_most(DOT, &ALICE, 2),
-				2
-			);
-			assert_eq!(<Tokens as fungibles::Inspect<_>>::balance(DOT, &ALICE), 2);
-			assert_eq!(
-				<Tokens as fungibles::Unbalanced<_>>::increase_balance_at_most(DOT, &ALICE, Balance::MAX),
-				Balance::MAX - 2
-			);
 		});
 }
 
@@ -286,7 +183,7 @@
 	>;
 
 	ExtBuilder::default()
-		.balances(vec![(ALICE, DOT, 100), (BOB, DOT, 100), (BOB, BTC, 100)])
+		.balances(vec![(ALICE, DOT, 100), (BOB, DOT, 100)])
 		.build()
 		.execute_with(|| {
 			assert_eq!(
@@ -297,10 +194,6 @@
 				<RebaseTokens as fungibles::Inspect<AccountId>>::total_issuance(DOT),
 				20000
 			);
-
-			assert!(<Tokens as fungibles::Inspect<_>>::asset_exists(DOT));
-			assert!(<Tokens as fungibles::Inspect<_>>::asset_exists(BTC));
-			assert!(!<Tokens as fungibles::Inspect<_>>::asset_exists(ETH));
 		});
 }
 
