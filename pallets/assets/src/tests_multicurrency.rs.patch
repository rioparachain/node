--- pallets/assets/src/tests_multicurrency.rs.tmp
+++ pallets/assets/src/tests_multicurrency.rs
@@ -4,11 +4,28 @@
 
 use super::*;
 use frame_support::{assert_noop, assert_ok};
-use mock::*;
+use mock::{Event, *};
+
+macro_rules! bvec {
+	($a:expr) => {
+		Text::try_from($a.to_vec()).unwrap()
+	};
+}
+
+fn get_asset_info() -> AssetInfo<Text> {
+	AssetInfo {
+		symbol: bvec!(b"RFUEL"),
+		name: bvec!(b"Rfuel"),
+		decimals: 12,
+		desc: bvec!(b"Rfuel"),
+		chain: Chain::Rio,
+	}
+}
 
 #[test]
 fn multicurrency_deposit_work() {
 	ExtBuilder::default().build().execute_with(|| {
+		assert_ok!(Pallet::<Runtime>::create_asset(DOT, get_asset_info()));
 		assert!(!Accounts::<Runtime>::contains_key(CHARLIE, DOT));
 		assert_eq!(Tokens::free_balance(DOT, &CHARLIE), 0);
 		assert_eq!(Tokens::total_issuance(DOT), 0);
@@ -196,7 +213,7 @@
 			assert_eq!(Tokens::reserved_balance(DOT, &ALICE), 0);
 			assert_eq!(Tokens::total_balance(DOT, &ALICE), 100);
 			assert_ok!(Tokens::reserve(DOT, &ALICE, 50));
-			System::assert_last_event(RuntimeEvent::Tokens(crate::Event::Reserved {
+			System::assert_last_event(Event::Tokens(crate::Event::Reserved {
 				currency_id: DOT,
 				who: ALICE,
 				amount: 50,
@@ -212,7 +229,7 @@
 			// ensure will not trigger Endowed event
 			assert!(System::events().iter().all(|record| !matches!(
 				record.event,
-				RuntimeEvent::Tokens(crate::Event::Endowed {
+				Event::Tokens(crate::Event::Endowed {
 					currency_id: DOT,
 					who: ALICE,
 					amount: _
@@ -231,13 +248,13 @@
 			assert_eq!(Tokens::reserved_balance(DOT, &ALICE), 0);
 			assert_eq!(Tokens::unreserve(DOT, &ALICE, 0), 0);
 			assert_eq!(Tokens::unreserve(DOT, &ALICE, 50), 50);
-			System::assert_last_event(RuntimeEvent::Tokens(crate::Event::Unreserved {
+			System::assert_last_event(Event::Tokens(crate::Event::Unreserved {
 				currency_id: DOT,
 				who: ALICE,
 				amount: 0,
 			}));
 			assert_ok!(Tokens::reserve(DOT, &ALICE, 30));
-			System::assert_last_event(RuntimeEvent::Tokens(crate::Event::Reserved {
+			System::assert_last_event(Event::Tokens(crate::Event::Reserved {
 				currency_id: DOT,
 				who: ALICE,
 				amount: 30,
@@ -245,7 +262,7 @@
 			assert_eq!(Tokens::free_balance(DOT, &ALICE), 70);
 			assert_eq!(Tokens::reserved_balance(DOT, &ALICE), 30);
 			assert_eq!(Tokens::unreserve(DOT, &ALICE, 15), 0);
-			System::assert_last_event(RuntimeEvent::Tokens(crate::Event::Unreserved {
+			System::assert_last_event(Event::Tokens(crate::Event::Unreserved {
 				currency_id: DOT,
 				who: ALICE,
 				amount: 15,
@@ -253,7 +270,7 @@
 			assert_eq!(Tokens::free_balance(DOT, &ALICE), 85);
 			assert_eq!(Tokens::reserved_balance(DOT, &ALICE), 15);
 			assert_eq!(Tokens::unreserve(DOT, &ALICE, 30), 15);
-			System::assert_last_event(RuntimeEvent::Tokens(crate::Event::Unreserved {
+			System::assert_last_event(Event::Tokens(crate::Event::Unreserved {
 				currency_id: DOT,
 				who: ALICE,
 				amount: 15,
@@ -263,7 +280,7 @@
 			// ensure will not trigger Endowed event
 			assert!(System::events().iter().all(|record| !matches!(
 				record.event,
-				RuntimeEvent::Tokens(crate::Event::Endowed {
+				Event::Tokens(crate::Event::Endowed {
 					currency_id: DOT,
 					who: ALICE,
 					amount: _
@@ -289,7 +306,7 @@
 				Ok(50)
 			);
 			// Repatriating from and to the same account, fund is `unreserved`.
-			System::assert_last_event(RuntimeEvent::Tokens(crate::Event::Unreserved {
+			System::assert_last_event(Event::Tokens(crate::Event::Unreserved {
 				currency_id: DOT,
 				who: ALICE,
 				amount: 0,
@@ -315,7 +332,7 @@
 				Tokens::repatriate_reserved(DOT, &BOB, &ALICE, 30, BalanceStatus::Reserved),
 				Ok(0)
 			);
-			System::assert_last_event(RuntimeEvent::Tokens(crate::Event::ReserveRepatriated {
+			System::assert_last_event(Event::Tokens(crate::Event::ReserveRepatriated {
 				currency_id: DOT,
 				from: BOB,
 				to: ALICE,
@@ -334,7 +351,7 @@
 			);
 
 			// Actual amount repatriated is 20.
-			System::assert_last_event(RuntimeEvent::Tokens(crate::Event::ReserveRepatriated {
+			System::assert_last_event(Event::Tokens(crate::Event::ReserveRepatriated {
 				currency_id: DOT,
 				from: BOB,
 				to: ALICE,
@@ -375,6 +392,7 @@
 #[test]
 fn no_op_if_amount_is_zero() {
 	ExtBuilder::default().build().execute_with(|| {
+		assert_ok!(Pallet::<Runtime>::create_asset(DOT, get_asset_info()));
 		assert_ok!(Tokens::ensure_can_withdraw(DOT, &ALICE, 0));
 		assert_ok!(Tokens::transfer(Some(ALICE).into(), BOB, DOT, 0));
 		assert_ok!(Tokens::transfer(Some(ALICE).into(), ALICE, DOT, 0));
@@ -448,7 +466,7 @@
 			assert_eq!(Tokens::reserved_balance_named(&RID_1, DOT, &ALICE), 0);
 			assert_eq!(Tokens::total_balance(DOT, &ALICE), 100);
 			assert_ok!(Tokens::reserve_named(&RID_1, DOT, &ALICE, 50));
-			System::assert_last_event(RuntimeEvent::Tokens(crate::Event::Reserved {
+			System::assert_last_event(Event::Tokens(crate::Event::Reserved {
 				currency_id: DOT,
 				who: ALICE,
 				amount: 50,
@@ -459,7 +477,7 @@
 			assert_eq!(Tokens::total_balance(DOT, &ALICE), 100);
 
 			assert_ok!(Tokens::reserve_named(&RID_2, DOT, &ALICE, 50));
-			System::assert_last_event(RuntimeEvent::Tokens(crate::Event::Reserved {
+			System::assert_last_event(Event::Tokens(crate::Event::Reserved {
 				currency_id: DOT,
 				who: ALICE,
 				amount: 50,
@@ -474,7 +492,7 @@
 			// ensure will not trigger Endowed event
 			assert!(System::events().iter().all(|record| !matches!(
 				record.event,
-				RuntimeEvent::Tokens(crate::Event::Endowed {
+				Event::Tokens(crate::Event::Endowed {
 					currency_id: DOT,
 					who: ALICE,
 					amount: _
@@ -494,7 +512,7 @@
 			assert_eq!(Tokens::unreserve_named(&RID_1, DOT, &ALICE, 0), 0);
 
 			assert_ok!(Tokens::reserve_named(&RID_1, DOT, &ALICE, 30));
-			System::assert_last_event(RuntimeEvent::Tokens(crate::Event::Reserved {
+			System::assert_last_event(Event::Tokens(crate::Event::Reserved {
 				currency_id: DOT,
 				who: ALICE,
 				amount: 30,
@@ -504,7 +522,7 @@
 			assert_eq!(Tokens::reserved_balance_named(&RID_1, DOT, &ALICE), 30);
 
 			assert_ok!(Tokens::reserve_named(&RID_2, DOT, &ALICE, 30));
-			System::assert_last_event(RuntimeEvent::Tokens(crate::Event::Reserved {
+			System::assert_last_event(Event::Tokens(crate::Event::Reserved {
 				currency_id: DOT,
 				who: ALICE,
 				amount: 30,
@@ -515,7 +533,7 @@
 			assert_eq!(Tokens::reserved_balance_named(&RID_2, DOT, &ALICE), 30);
 
 			assert_eq!(Tokens::unreserve_named(&RID_1, DOT, &ALICE, 30), 0);
-			System::assert_last_event(RuntimeEvent::Tokens(crate::Event::Unreserved {
+			System::assert_last_event(Event::Tokens(crate::Event::Unreserved {
 				currency_id: DOT,
 				who: ALICE,
 				amount: 30,
@@ -526,7 +544,7 @@
 			assert_eq!(Tokens::reserved_balance_named(&RID_2, DOT, &ALICE), 30);
 
 			assert_eq!(Tokens::unreserve_named(&RID_2, DOT, &ALICE, 30), 0);
-			System::assert_last_event(RuntimeEvent::Tokens(crate::Event::Unreserved {
+			System::assert_last_event(Event::Tokens(crate::Event::Unreserved {
 				currency_id: DOT,
 				who: ALICE,
 				amount: 30,
@@ -538,7 +556,7 @@
 			// ensure will not trigger Endowed event
 			assert!(System::events().iter().all(|record| !matches!(
 				record.event,
-				RuntimeEvent::Tokens(crate::Event::Endowed {
+				Event::Tokens(crate::Event::Endowed {
 					currency_id: DOT,
 					who: ALICE,
 					amount: _
@@ -584,7 +602,7 @@
 				Tokens::repatriate_reserved_named(&RID_1, DOT, &BOB, &ALICE, 30, BalanceStatus::Reserved),
 				Ok(0)
 			);
-			System::assert_last_event(RuntimeEvent::Tokens(crate::Event::ReserveRepatriated {
+			System::assert_last_event(Event::Tokens(crate::Event::ReserveRepatriated {
 				currency_id: DOT,
 				from: BOB,
 				to: ALICE,
@@ -605,7 +623,7 @@
 			);
 
 			// Actual amount repatriated is 20.
-			System::assert_last_event(RuntimeEvent::Tokens(crate::Event::ReserveRepatriated {
+			System::assert_last_event(Event::Tokens(crate::Event::ReserveRepatriated {
 				currency_id: DOT,
 				from: BOB,
 				to: ALICE,
@@ -722,7 +740,7 @@
 			assert_eq!(Tokens::free_balance(DOT, &BOB), 100);
 			assert_eq!(Tokens::reserved_balance_named(&RID_1, DOT, &BOB), 50);
 
-			System::assert_last_event(RuntimeEvent::Tokens(crate::Event::ReserveRepatriated {
+			System::assert_last_event(Event::Tokens(crate::Event::ReserveRepatriated {
 				currency_id: DOT,
 				from: ALICE,
 				to: BOB,
@@ -731,72 +749,3 @@
 			}));
 		});
 }
-
-#[test]
-fn slash_hook_works() {
-	ExtBuilder::default()
-		.balances(vec![(ALICE, DOT, 100)])
-		.build()
-		.execute_with(|| {
-			let initial_hook_calls = OnSlashHook::<Runtime>::calls();
-
-			// slashing zero tokens is a no-op
-			assert_eq!(Tokens::slash(DOT, &ALICE, 0), 0);
-			assert_eq!(OnSlashHook::<Runtime>::calls(), initial_hook_calls);
-
-			assert_eq!(Tokens::slash(DOT, &ALICE, 50), 0);
-			assert_eq!(OnSlashHook::<Runtime>::calls(), initial_hook_calls + 1);
-
-			// `slash` calls the hook even if no amount was slashed
-			assert_eq!(Tokens::slash(DOT, &ALICE, 100), 50);
-			assert_eq!(OnSlashHook::<Runtime>::calls(), initial_hook_calls + 2);
-		});
-}
-
-#[test]
-fn slash_hook_works_for_reserved() {
-	ExtBuilder::default()
-		.balances(vec![(ALICE, DOT, 100)])
-		.build()
-		.execute_with(|| {
-			let initial_slash_hook_calls = OnSlashHook::<Runtime>::calls();
-
-			assert_ok!(Tokens::reserve(DOT, &ALICE, 50));
-			// slashing zero tokens is a no-op
-			assert_eq!(Tokens::slash_reserved(DOT, &ALICE, 0), 0);
-			assert_eq!(OnSlashHook::<Runtime>::calls(), initial_slash_hook_calls);
-
-			assert_eq!(Tokens::slash_reserved(DOT, &ALICE, 50), 0);
-			assert_eq!(OnSlashHook::<Runtime>::calls(), initial_slash_hook_calls + 1);
-
-			// `slash_reserved` calls the hook even if no amount was slashed
-			assert_eq!(Tokens::slash_reserved(DOT, &ALICE, 50), 50);
-			assert_eq!(OnSlashHook::<Runtime>::calls(), initial_slash_hook_calls + 2);
-		});
-}
-
-#[test]
-fn slash_hook_works_for_reserved_named() {
-	ExtBuilder::default()
-		.balances(vec![(ALICE, DOT, 100)])
-		.build()
-		.execute_with(|| {
-			let initial_slash_hook_calls = OnSlashHook::<Runtime>::calls();
-
-			assert_ok!(Tokens::reserve_named(&RID_1, DOT, &ALICE, 10));
-			// slashing zero tokens is a no-op
-			assert_eq!(Tokens::slash_reserved_named(&RID_1, DOT, &ALICE, 0), 0);
-			assert_eq!(OnSlashHook::<Runtime>::calls(), initial_slash_hook_calls);
-
-			assert_eq!(Tokens::slash_reserved_named(&RID_1, DOT, &ALICE, 10), 0);
-			assert_eq!(OnSlashHook::<Runtime>::calls(), initial_slash_hook_calls + 1);
-
-			// `slash_reserved_named` calls `slash_reserved` under-the-hood with a
-			// value to slash based on the account's balance. Because the account's
-			// balance is currently zero, `slash_reserved` will be a no-op and
-			// the OnSlash hook will not be called.
-			assert_eq!(Tokens::slash_reserved_named(&RID_1, DOT, &ALICE, 50), 50);
-			// Same value as previously because of the no-op
-			assert_eq!(OnSlashHook::<Runtime>::calls(), initial_slash_hook_calls + 1);
-		});
-}
